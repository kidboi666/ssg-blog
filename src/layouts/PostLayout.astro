---
import PostInfo from "@components/PostInfo.astro";
import BaseLayout from "./BaseLayout.astro";
import { getCollection } from "astro:content";
import CategoryNavigation from "@components/CategoryNavigation.astro";
import { getEntry } from "astro:content";
import { render } from "astro:content";

const { frontmatter } = Astro.props;
const { slug } = Astro.params;

const posts = await getCollection(frontmatter.category);
const post = await getEntry(frontmatter.category, slug);
const { headings } = await render(post);
---

<BaseLayout headings={headings}>
  <CategoryNavigation posts={posts} category={frontmatter.category} />
  <div class="flex w-full flex-col justify-center pl-72 xl:flex-row">
    <PostInfo headings={headings} />
    <div class="post w-full max-w-[752px] bg-white px-8">
      <h1>{frontmatter.title}</h1>
      <p class="text-zinc-500">
        등록일 : {new Date(frontmatter.pubDate).toLocaleDateString()}
      </p>
      <slot />
    </div>
  </div>
</BaseLayout>

<script is:inline>
  const navLinks = document.querySelectorAll(".heading");

  navLinks.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const targetId = entry.target.id;

        // 현재 화면에 보이는 섹션만 활성화
        if (entry.isIntersecting) {
          navLinks.forEach((link) => {
            link.classList.toggle(
              "active",
              link.getAttribute("href") === `#${targetId}`,
            );
          });
        }
      });
    });
    console.log(observer);
    // 모든 섹션을 관찰
    document.getElementsByTagName("h1").forEach((section) => {
      observer.observe(section);
    });
  });
</script>
